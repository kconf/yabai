#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
:: default : yabai -m config window_border off
#
# defines a new mode 'app' with an on_enter command, that captures keypresses
 :: app @ : yabai -m config window_border on

# from 'default' mode, activate mode 'app'
hyper - a ; app

# from 'app' mode, activate mode 'default'
app < escape ; default

# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

app < e : open -na /Applications/Emacs.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
hyper - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# screen shoot
hyper - p : /usr/sbin/screencapture -i "$HOME/Downloads/ss-$(date +'%Y%m%dT%H%M%S').png"

# focus window
hyper - h : yabai -m window --focus west
hyper - j : yabai -m window --focus south
hyper - k : yabai -m window --focus north
hyper - l : yabai -m window --focus east
hyper - left : yabai -m window --focus west
hyper - down : yabai -m window --focus south
hyper - up : yabai -m window --focus north
hyper - right : yabai -m window --focus east

# swap managed window
# cmd + alt - h : yabai -m window --swap west

# move managed window
meh - h : yabai -m window --warp west
meh - j : yabai -m window --warp south
meh - k : yabai -m window --warp north
meh - l : yabai -m window --warp east
meh - left : yabai -m window --warp west
meh - down : yabai -m window --warp south
meh - up : yabai -m window --warp north
meh - right : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# use system shortcut key instead
# cmd + alt - x : yabai -m space --focus recent
# hyper - 1 : yabai -m space --focus 1
# hyper - 2 : yabai -m space --focus 2
# hyper - 3 : yabai -m space --focus 3
# hyper - 4 : yabai -m space --focus 4
# hyper - 5 : yabai -m space --focus 5
# hyper - 6 : yabai -m space --focus 6
# hyper - 7 : yabai -m space --focus 7
# hyper - 0 : yabai -m space --focus recent


# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
meh - 1 : yabai -m window --space  1; yabai -m space --focus 1
meh - 2 : yabai -m window --space  2; yabai -m space --focus 2
meh - 3 : yabai -m window --space  3; yabai -m space --focus 3
meh - 4 : yabai -m window --space  4; yabai -m space --focus 4
meh - 5 : yabai -m window --space  5; yabai -m space --focus 5
meh - 6 : yabai -m window --space  6; yabai -m space --focus 6
meh - 7 : yabai -m window --space  7; yabai -m space --focus 7
meh - 0 : yabai -m window --space recent; yabai -m space --focus recent

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
hyper - n : yabai -m window --display recent; yabai -m display --focus recent
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
hyper - f : yabai -m window --toggle zoom-fullscreen
hyper - r : yabai -m window --toggle native-fullscreen

# toggle window split type
meh - s : yabai -m window --toggle split

# space layout
hyper - s : yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "stack" else "bsp" end')

# float / unfloat window and center on screen
hyper - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
